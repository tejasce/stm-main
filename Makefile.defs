#
# @file: Makefile that defines absolute paths and macro definitions for
#        the build system for the repo. A symlink to this file must
#        exist at each directory level of this repo.
#


#
# Use temporary variable to represent TOPDIR since this file maybe
# included from anywhere in the directory tree. Since value of
# TOPDIR is used to determine where this file was included from,
# it may or may not be set. And paths of these makefiles must
# always resolve.
#
_TOPDIR_ := $(shell git rev-parse --show-toplevel)
Makefile.buildenv := $(_TOPDIR_)/build/Makefile.buildenv
Makefile.cbin := $(_TOPDIR_)/build/Makefile.cbin
Makefile.clib := $(_TOPDIR_)/build/Makefile.clib
Makefile.protobuf := $(_TOPDIR_)/build/Makefile.protobuf
Makefile.stm32 := $(_TOPDIR_)/build/Makefile.stm32
Makefile.toolchain := $(_TOPDIR_)/build/Makefile.toolchain

#
# Common constants
#
DEPFLAGS = -MT $@ -MMD -MP -MF $*.Td
STM32_CFLAGS := -mcpu=cortex-m4 -mlittle-endian -mthumb -Os -ggdb
# Supported C++ source and header extensions. Excludes .c because
# that's what distinguishes a C file from C++ file
CC_EXTS := .cpp .cc
CC_H_EXTS := .hpp .h .hh
CC_EXTS_PATT := $(CC_EXTS:%=\%%)
CC_H_EXTS_PATT := $(CC_H_EXTS:%=\%%)
# PROTOBUF ARCH dependent CFLAGS and LFLAGS
PROTOBUF_CFLAGS := -pthread -I/usr/local/$(ARCH)/include
PROTOBUF_LFLAGS := -L/usr/local/$(ARCH)/lib -lprotobuf -lpthread

#
# All supported rules and grep pattern to help locate
# all the targets in a directory
#
ALL_RULES := STM32_ELF C_LIB C_BIN PROTO_LIB
PROD_PATT := $(ALL_RULES:%=/^%/)
PROD_PATT := $(subst / /,/ || /,$(PROD_PATT))

#
# Enumerate name of attributes for each rule to undef them before inclusion
# of Makefile.<rule> for proper init state for the new "PRODUCT"
#
COMMON_ATTRS := PRODUCT
COMMON_C_ATTRS := CFLAGS CXXFLAGS LFLAGS H_DIRS C_SRCS DEPEND
STM32_ELF_ATTRS := S_SRCS LD_SRC $(COMMON_C_ATTRS) $(COMMON_ATTRS)
C_LIB_ATTRS := I_HDRS STRIP_INC_PREFIX INC_PREFIX $(COMMON_C_ATTRS) $(COMMON_ATTRS)
C_BIN_ATTRS := $(COMMON_C_ATTRS) $(COMMON_ATTRS)
PROTO_LIB_ATTRS := PB_SRCS DEPEND
ALL_ATTRS := $(sort $(foreach rule,$(ALL_RULES),$($(rule)_ATTRS)))


#
# Import toolchain include macro
#
include $(Makefile.toolchain)


#
# Helper command line variable for build debugging
#
VERBOSE ?= 0
ifeq ($(VERBOSE),2)
Q :=
else
Q := @
endif


#
# Macro to include a sub-directory
#
define subdirs
PRODIR := $(1)
OBJDIR := $(OBJDIR_PREFIX)$(ARCH)

#
# Set toolchain for the subdir and the ones below it. This can be overridden by
# each individual directory
#
$$(eval $$(call inc_toolchain,$$(ARCH)))

#
# Variables representing supported product build rules. Reset for the subdir
#
$$(foreach RULE,$(ALL_RULES),$$(eval $$(RULE) := ))

#
# Clean the slate: reset attributes for all rules
#
$$(foreach ATTR,$(ALL_ATTRS),$$(eval $$(ATTR) := ))

include $(1)/Makefile
endef


#
# Wrapper macro to "subdirs" macro. Depending upon which directory "$(MAKE)"
# is invoked upon, this macro will either simply include subdirectories or
# invoke appropriate targets from the $(TOPDIR).
#
# Initializes $(CC) for the target architecture.
# May get overriden by a Makefile.<rule> (during $(call inc_rule,<rule>,<product>))
#
#
define inc_subdir
ifeq ($(TOPDIR),)

ifeq ($(MAKECMDGOALS),)
TARGETS := all
else
TARGETS := $(MAKECMDGOALS)
endif

PROD_NAME := $(shell find $(1) -name Makefile -exec awk '$(PROD_PATT){print $$3}' {} \+)
PROD_TGTS :=
$$(foreach TGT,$$(TARGETS), $$(foreach PROD,$$(PROD_NAME),$$(eval PROD_TGTS += $$(TGT).$$(PROD))))

$$(TARGETS):
	$(Q)$(MAKE) -C $$(_TOPDIR_) --no-print-directory $$(PROD_TGTS)
else
$$(foreach SUBDIR,$(2:%=$(1)%),$$(eval $$(call subdirs,$$(SUBDIR))))

endif
endef


#
# Wrapper macro to include "Makefile.<rule>".
#
define inc_rule
ifeq ($(TOPDIR),)

ifeq ($(MAKECMDGOALS),)
TARGETS := all.$(2)
else
TARGETS := $(MAKECMDGOALS:%=%.$(2))
$(MAKECMDGOALS): $$(TARGETS)
endif

$$(TARGETS):
	$(Q)$(MAKE) -C $$(_TOPDIR_) --no-print-directory $$@

else
include $(Makefile.$(1))
endif

#
# Clean the slate: reset attributes for all rules
#
$$(foreach ATTR,$(ALL_ATTRS),$$(eval $$(ATTR) := ))

#
# Reset back to original toolchain
#
$$(eval $$(call inc_toolchain,$$(ARCH)))
endef


#
# Macro specifying rules to build an individual C/C++ object target and wrapper macro
# that accepts multiple C/C++ source files and calls the worker macro
#
define C_OBJ_TGT

SUFFIX := $$(suffix $(1))

ifeq ($$(SUFFIX),$$(filter $$(SUFFIX),$$(CC_EXTS)))
GCC := $$(CXX)
else ifeq ($$(SUFFIX),.c)
GCC := $$(CC)
# Ignore CXXFLAGS for .c files
CXXFLAGS :=
else
$$(error ERROR: Invalid C/C++ suffix '$(1)' (Supported: .c $$(CC_EXTS)))
endif

# Remove $(OBJDIR) prefix from "SRCFILE" (aka $(1)) [in case if it's a generated one]
# before adding it as a prefix to "OBJFILE"
OBJFILE := $(OBJDIR)/$$(patsubst %$$(SUFFIX),%.o,$(subst $(OBJDIR)/,,$(1)))

$$(OBJFILE):: GCC := $$(GCC)
$$(OBJFILE):: CFLAGS := $$(CFLAGS)
$$(OBJFILE):: CXXFLAGS := $$(CXXFLAGS)
$$(OBJFILE): $(1) | $$(dir $$(OBJFILE))
	@if [ "$(VERBOSE)" -ge "1" ]; then \
		echo "Building $$< => $$@"; \
	fi;
	$(Q)$$(GCC) $$(CFLAGS) $$(CXXFLAGS) $$(DEPFLAGS) -c $$< -o $$@
	@mv -f $$*.Td $$*.d && touch $$@

include $$(wildcard $$(patsubst %,%.d,$$(basename $$(OBJFILE))))
endef
define add_c_obj_tgts
$$(foreach SRCFILE,$(1),$$(eval $$(call C_OBJ_TGT,$$(SRCFILE))))
endef


#
# Evaluate depency targets, CFLAGS and LFLAGS for deps as specified by $(DEPEND).
# This is common eval between Makefile.{cbin,clib,stm32}.
#  [in] - $(DEPEND), $(OBJDIR)
# [out] - Dependency targets: $(DEP_SO) $(DEP_AR)
#         Dependency CFLAGS: $(DEPINC)
#         Dependency LFLAGS: $(DEP_LD)
#
define eval_clib_deps
DEPDIR := $$(foreach dep,$$(DEPEND),$$(firstword $$(subst :, ,$$(dep))))
DEPTGT := $$(foreach dep,$$(DEPEND),$$(lastword $$(subst :, ,$$(dep))))
DEP_SO := $$(foreach dep,$$(DEPEND),$$(patsubst %,$$(OBJDIR)/%.so,$$(subst :,/lib,$$(dep))))
DEP_AR := $$(DEP_SO:%.so=%.a)
DEPINC := $$(DEPDIR:%=-I$$(OBJDIR)/%)
DEP_LD := $$(DEPDIR:%=-L$$(OBJDIR)/%)
DEP_LD += $$(DEPTGT:%=-l:lib%.a)
endef
