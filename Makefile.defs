#
# @file: Makefile that defines absolute paths and macro definitions for
#        the build system for the repo. It is included at each directory
#        level of this repo to allow invoking and building at any
#        sub-directory level.
#


#
# Use temporary variable to represent TOPDIR since this file maybe
# included from anywhere in the directory tree. Since value of
# TOPDIR is used to determine where this file was included from,
# it may or may not be set. And paths of these makefiles must
# always resolve.
#
_TOPDIR_ := $(shell git rev-parse --show-toplevel)
Makefile.buildenv := $(_TOPDIR_)/build/Makefile.buildenv
Makefile.cargo := $(_TOPDIR_)/build/Makefile.cargo
Makefile.cbin := $(_TOPDIR_)/build/Makefile.cbin
Makefile.clib := $(_TOPDIR_)/build/Makefile.clib
Makefile.protobuf := $(_TOPDIR_)/build/Makefile.protobuf
Makefile.ros := $(_TOPDIR_)/build/Makefile.ros
Makefile.stm32 := $(_TOPDIR_)/build/Makefile.stm32
Makefile.toolchain := $(_TOPDIR_)/build/Makefile.toolchain
Makefile.zephyr := $(_TOPDIR_)/build/Makefile.zephyr
CLANG_TIDY_CONFIG := $(_TOPDIR_)/.clang-tidy

#
# Common constants
#
CORES := $(shell nproc 2>/dev/null || echo 1)
DEPFLAGS = -MT $@ -MMD -MP -MF $*.Td
STM32_CFLAGS := -mcpu=cortex-m4 -mlittle-endian -mthumb -Os -ggdb
# Supported C++ source and header extensions. Excludes .c because
# that's what distinguishes a C file from C++ file
CC_EXTS := .cpp .cc
CC_H_EXTS := .hpp .h .hh
CC_EXTS_PATT := $(CC_EXTS:%=\%%)
CC_H_EXTS_PATT := $(CC_H_EXTS:%=\%%)
# Global C flags
GLOBAL_CFLAGS := -Wall $(if $(RELEASE),-O3,-g -DDEBUG)
# Global CXX flags
GLOBAL_CXXFLAGS := --std=c++17 -Wextra -Wpedantic
# PROTOBUF ARCH dependent CFLAGS and LFLAGS
PROTOBUF_CFLAGS := -pthread -I/usr/local/$(ARCH)/include
PROTOBUF_LFLAGS := -L/usr/local/$(ARCH)/lib -lprotobuf -lpthread
# Number of colums to print at start of line in build output
PCOL := 12
# For clang-tidy. Enumerate flags that clang doesn't support to filter them out
CLANG_UNSUPPORTED_CFLAGS := -mcpu=cortex-m4 -mthumb-interwork
# Default install prefix (can be overriden by individual product makefiles)
LIB_INCLUDE_INSTALL_PREFIX := /usr/include
LIB_INSTALL_PREFIX := /usr/lib
BIN_INSTALL_PREFIX := /usr/bin
FW_INSTALL_PREFIX := /usr/lib/firmware

#
# All supported rules
#
ALL_RULES := STM32_ELF C_LIB C_BIN PROTO_LIB ZEPHYR_APP CARGO_PROJ

#
# All Makefile.<rule> must implement these targets
#
ALL_GOALS := all clean tarball

#
# Enumerate name of attributes for each rule to undef them before inclusion
# of Makefile.<rule> for proper init state for the new "PRODUCT"
#
COMMON_ATTRS := PRODUCT
COMMON_C_ATTRS := CFLAGS CXXFLAGS LFLAGS H_DIRS C_SRCS DEPEND NO_LINT
STM32_ELF_ATTRS := S_SRCS LD_SRC $(COMMON_C_ATTRS)
C_LIB_ATTRS := I_HDRS STRIP_INC_PREFIX INC_PREFIX $(COMMON_C_ATTRS)
C_BIN_ATTRS := $(COMMON_C_ATTRS)
PROTO_LIB_ATTRS := PB_SRCS DEPEND
ZEPHYR_APP_ATTRS := BOARD ZEPHYR_TOOLCHAIN_ARGS
CARGO_PROJ_ATTRS :=
ALL_ATTRS := $(sort $(foreach rule,$(ALL_RULES),$($(rule)_ATTRS))) $(COMMON_ATTRS)


#
# Import toolchain include macro
#
include $(Makefile.toolchain)


#
# Helper command line variable for build debugging
#
ifdef VERBOSE
Q :=
else
Q := @
endif


#
# Macro to clean the slate:
# Undef all rules and their attributes + include toolchain for $$(ARCH)
#
define restore_defaults
#
# Set toolchain for the subdir and the ones below it. This can be overridden by
# each individual directory
#
$$(eval $$(call inc_toolchain,$$(ARCH)))

#
# Variables representing supported product build rules. Reset for the subdir
#
$$(foreach RULE,$(ALL_RULES),$$(eval $$(RULE) := ))

#
# Clean the slate: reset attributes for all rules
#
$$(foreach ATTR,$(ALL_ATTRS),$$(eval $$(ATTR) := ))
endef


#
# Macro to include a sub-directory
#
define subdirs
#
# While including this subdir also define ease-of-use target for it
# but only when invoked from TOPDIR to define a target for subdir's
# path relative to TOPDIR only
#
ifneq ($(TOPDIR),)
PRODIR := $(1)
DIR_TGT := $$(PRODIR) $$(PRODIR)/
.PHONY: $$(DIR_TGT)
$$(DIR_TGT):
	$(Q)$$(MAKE) --no-print-directory -C $$@ $$(if $$(clean),clean,$$(if $$(tarball),tarball,all))

else
PRODIR := $(shell realpath . --relative-to $(_TOPDIR_))/$(subst ./,,$(1))
endif

#
# Reset state before including this subdir
#
$$(eval $$(call restore_defaults))

include $(1)/Makefile
endef


#
# Wrapper macro to "subdirs" macro to include multiple sub-directories
#
define inc_subdir
$$(foreach SUBDIR,$(2:%=$(1)%),$$(eval $$(call subdirs,$$(SUBDIR))))
endef


#
# Wrapper macro to include "Makefile.<rule>".
#
define inc_rule
# When inc_rule() called from bottom level subdir
PRODIR ?= $(shell realpath . --relative-to $(_TOPDIR_))
# Prepend path and rule type to the product name to make it unique in that path
PRODUCT := $$(PRODIR)__$(1)__$(2)
# For top Makefile
PRODUCTS += $$(PRODUCT)

ifeq ($(TOPDIR),)
#
# inc_rule() may be called more than once in a Makefile and each
# time, we accumulate goals to be built by updating TARGETS
#
ifeq ($(MAKECMDGOALS),)
$$(eval TARGETS += all.$$(PRODUCT))
else ifeq ($(filter $(ALL_GOALS),$(MAKECMDGOALS)),)
# Only $(ALL_GOALS) goals are supported from all dir-levels. Any other goals are
# simply run from TOPDIR w/o accumulation and conversion for actual targets
TARGETS := $(MAKECMDGOALS)
else
$$(eval TARGETS += $$(MAKECMDGOALS:%=%.$$(PRODUCT)))
endif

#
# Rule to execute $$(TARGETS) needs to be defined only once.
#
ifndef DEF_TARGETS
DEF_TARGETS := 1

# Establish default goal when invoked from subdir (instead of TOPDIR).
# Whether goal is specified or not the action remains the same:
# execute $$(TARGETS) from TOPDIR
_all_ := $$(if $$(MAKECMDGOALS),$$(MAKECMDGOALS),$$(TARGETS))
.DEFAULT_GOAL := $$(_all_)
$$(_all_):
	$(Q)$$(MAKE) --no-print-directory -C $$(_TOPDIR_) $$(TARGETS)
endif

else
#
# While we are here, define ease-of-use target for this product.
# "flash" target is applicable only to specific products and hence
# defined only here
#
$(PRODIR)\:$(2): $$(if $$(clean),clean,$$(if $$(flash),flash,$$(if $$(tarball),tarball,all))).$$(PRODUCT)

include $(Makefile.$(1))
endif

#
# Reset for the next rule inclusion
#
$$(eval $$(call restore_defaults))
endef


#
# Macro specifying rules to build an individual C/C++ object target and wrapper macro
# that accepts multiple C/C++ source files and calls the worker macro
#
define C_OBJ_TGT

SUFFIX := $$(suffix $(1))

ifeq ($$(SUFFIX),$$(filter $$(SUFFIX),$$(CC_EXTS)))
GCC := $$(CXX)
GCCSTR := "[CXX]"
else ifeq ($$(SUFFIX),.c)
GCC := $$(CC)
GCCSTR := "[CC]"
# Ignore CXXFLAGS for .c files
CXXFLAGS :=
else
$$(error ERROR: Invalid C/C++ suffix '$(1)' (Supported: .c $$(CC_EXTS)))
endif

# Flag to distinguish a source file from a generated one (from protoc).
# This is used to avoid running clang-tidy on generated files
GENERATED := $(if $(filter $(OBJDIR),$(subst /, ,$(1))),1,0)
CLANG_TIDY_DEP := $$(shell [ "$$(GENERATED)" = "0" ] && [ -z "$$(NO_LINT)" ] && echo $$(CLANG_TIDY_CONFIG))

# Remove $(OBJDIR) prefix from "SRCFILE" (aka $(1)) [in case if it's a generated one]
# before adding it as a prefix to "OBJFILE"
OBJFILE := $(OBJDIR)/$$(patsubst %$$(SUFFIX),%.o,$(subst $(OBJDIR)/,,$(1)))

$$(OBJFILE):: GCCSTR := $$(GCCSTR)
$$(OBJFILE):: GCC := $$(GCC)
$$(OBJFILE):: CFLAGS := $$(CFLAGS)
$$(OBJFILE):: CXXFLAGS := $$(CXXFLAGS)
$$(OBJFILE):: CLANG_TIDY_DEP := $$(CLANG_TIDY_DEP)
$$(OBJFILE): $(1) $$(CLANG_TIDY_DEP) | $$(dir $$(OBJFILE))
	@printf "%$(PCOL)s %s\n" $$(GCCSTR) $$@
	$(Q)if [ -n "$$(CLANG_TIDY_DEP)" ]; then \
		clang-tidy -quiet $$< -- $$(filter-out $$(CLANG_UNSUPPORTED_CFLAGS),$$(CFLAGS)) $$(CXXFLAGS) $$(DEPFLAGS); \
	fi
	$(Q)$$(GCC) $$(CFLAGS) $$(CXXFLAGS) $$(DEPFLAGS) -c $$< -o $$@
	@mv -f $$*.Td $$*.d && touch $$@

include $$(wildcard $$(patsubst %,%.d,$$(basename $$(OBJFILE))))
endef
define add_c_obj_tgts
$$(foreach SRCFILE,$(1),$$(eval $$(call C_OBJ_TGT,$$(SRCFILE))))
endef


#
# Evaluate depency targets, CFLAGS and LFLAGS for deps as specified by $(DEPEND).
# This is common eval between Makefile.{cbin,clib,stm32}.
#  [in] - $(DEPEND), $(OBJDIR)
# [out] - Dependency target names: $(DEP_SO) $(DEP_AR)
#         Dependency CFLAGS: $(DEPINC)
#         Dependency LFLAGS: $(DEP_LD)
#
define eval_clib_deps
DEPDIR := $$(foreach dep,$$(DEPEND),$$(firstword $$(subst :, ,$$(dep)))) $$(PRODIR)
DEPTGT := $$(foreach dep,$$(DEPEND),$$(lastword $$(subst :, ,$$(dep))))
DEP_SO := $$(foreach dep,$$(DEPEND),$$(patsubst %,$$(OBJDIR)/%.so,$$(if $$(firstword $$(patsubst :%,,$$(dep))),,$$(PRODIR))$$(subst :,/lib,$$(dep))))
DEP_AR := $$(DEP_SO:%.so=%.a)
DEPINC := $$(DEPDIR:%=-I$$(OBJDIR)/%)
DEP_LD := $$(DEPDIR:%=-L$$(OBJDIR)/%)
DEP_LD += $$(DEPTGT:%=-l:lib%.a)
endef


#
# Macro to create target that's invoked if "cflags" of a product is changed from
# previous build. It is also added as dependency on the "c-objects" of the product.
#  [in] - "product name $(1)", $(PRODUCT_OBJDIR), $(CFLAGS), $(LFLAGS), $(CXXFLAGS)
# [out] - Dependency target that detects changes in "cflags" and forces rebuild
#         of "c-objects" of the product
#
define cflags_change_tgt
# List of flags to detect change in
DIFF_FLAGS := CFLAGS LFLAGS CXXFLAGS

METADATA_FILE := $(PRODUCT_OBJDIR)/metadata.$(1)__$(2).mk
METADATA_FILE_TMP := $$(METADATA_FILE:%=%.tmp)

$$(METADATA_FILE):: CFLAGS := $(CFLAGS)
$$(METADATA_FILE):: LFLAGS := $(LFLAGS)
$$(METADATA_FILE):: CXXFLAGS := $(CXXFLAGS)
$$(METADATA_FILE):: METADATA_FILE_TMP := $$(METADATA_FILE_TMP)
$$(METADATA_FILE): clean_$$(METADATA_FILE_TMP) | $(PRODUCT_OBJDIR)
	$$(foreach flag,$$(DIFF_FLAGS),$$(shell eval "echo $$(flag) := $$($$(flag)) >> $$(METADATA_FILE_TMP)"))
	@if [ ! -f $$@ ] || ! diff $$@ $$(METADATA_FILE_TMP) >/dev/null; then \
		[ -f $$@ ] && printf "%$(PCOL)s %s\n" "[=>]" "$$(@D)/$(2) [flags changed]"; \
		mv $$(METADATA_FILE_TMP) $$@; \
	else \
		rm $$(METADATA_FILE_TMP); \
	fi

clean_$$(METADATA_FILE_TMP):: METADATA_FILE_TMP := $$(METADATA_FILE_TMP)
clean_$$(METADATA_FILE_TMP):
	@rm -f $$(METADATA_FILE_TMP)

$(C_OBJS): $$(METADATA_FILE)
endef


#
# Simple macro that implements BASH method to iteratively delete empty dirs
#
define del_empty_dirs
	while true; do \
		empty_dirs=$$(find $(1) -type d -empty 2>/dev/null); \
		[ -z "$$empty_dirs" ] && break; \
		rmdir $$empty_dirs 2>/dev/null || true; \
	done;
endef


#
# Common macro to add "flash" target for STM32_ELF and ZEPHYR_APP
# It currently assumes the ST-Micro boards and hence uses st-flash
# [in] - target name, target dependency, path-to-fw-binary
#
define add_flash_tgt
$(1):: SUDO := $(if $(filter Linux,$(shell uname)),sudo,)
$(1):: DEV_SR := $(if $(DEV_SERIAL),--serial $(DEV_SERIAL),)
$(1):: ST_FLASH := $$(SUDO) st-flash $$(DEV_SR) --connect-under-reset
$(1): $(2)
	@printf "%$(PCOL)s %s\n" "[ST-FLASH]" "$(3)"
	$(Q)if [ -z "$$(reset_only)" ]; then \
		$$(ST_FLASH) erase && $$(ST_FLASH) write $(3) 0x8000000; \
	fi && \
	$$(ST_FLASH) reset
endef


#
# Common macro to add "tarball" target for a product
# [in] - tarball target name, target deps, install prefix
#
define add_tarball_tgt
$(1):: PRODUCT_OBJDIR := $$(PRODUCT_OBJDIR)
$(1):: INSTALL_PREFIX := $(3)
$(1): $(2)
	@printf "%$(PCOL)s %s\n" "[TAR]" "$$@"
	$(Q)tar hcf $$@ $$^ --transform "s|$$(PRODUCT_OBJDIR)|$$(INSTALL_PREFIX)|"
endef
