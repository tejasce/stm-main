#
# @file: Makefile that defines absolute paths and macro definitions for
#        the build system for the repo. A symlink to this file must
#        exist at each directory level of this repo.
#


#
# Use temporary variable to represent TOPDIR since this file maybe
# included from anywhere in the directory tree. Since value of
# TOPDIR is used to determine where this file was included from,
# it may or may not be set. And paths of these makefiles must
# always resolve.
#
_TOPDIR_ := $(shell git rev-parse --show-toplevel)
Makefile.aarch64 := $(_TOPDIR_)/build/Makefile.aarch64
Makefile.arm := $(_TOPDIR_)/build/Makefile.arm
Makefile.buildenv := $(_TOPDIR_)/build/Makefile.buildenv
Makefile.cbin := $(_TOPDIR_)/build/Makefile.cbin
Makefile.clib := $(_TOPDIR_)/build/Makefile.clib
Makefile.firmware := $(_TOPDIR_)/build/Makefile.firmware
Makefile.stm32 := $(_TOPDIR_)/build/Makefile.stm32
Makefile.x86_64 := $(_TOPDIR_)/build/Makefile.x86_64

#
# Common constants
#
DEPFLAGS = -MT $@ -MMD -MP -MF $*.Td
STM32_CFLAGS := -mcpu=cortex-m4 -mlittle-endian -mthumb -Os -ggdb

#
# Helper command line variable for build debugging
#
ifeq ($(VERBOSE),2)
Q :=
else
Q := @
endif

#
# Macro to include a sub-directory
#
define subdirs
PRODIR := $(1)
OBJDIR := $(OBJDIR_PREFIX)$(ARCH)
#
# Undef variables before include of a "rule makefile" (e.g. Makefile.stm32)
#

#
# Variables representing supported product build rules.
#
STM32_ELF :=
C_LIB :=
C_BIN :=


#
# Rules for targets "[all|clean].$(PRODUCT)" would need their own
# copy of following variables.
#
PRODUCT :=
CFLAGS :=
LFLAGS :=

include $(1)/Makefile
endef


#
# Enlist all supported rules to help locate all the targets in a directory
#
ALL_RULES := STM32_ELF C_LIB C_BIN
PROD_PATT := $(ALL_RULES:%=/^%/)
PROD_PATT := $(subst / /,/ || /,$(PROD_PATT))


#
# Wrapper macro to "subdirs" macro. Depending upon which directory "$(MAKE)"
# is invoked upon, this macro will either simply include subdirectories or
# invoke appropriate targets from the $(TOPDIR).
#
# Initializes $(CC) for the target architecture.
# May get overriden by a Makefile.<rule> (during $(call inc_rule,<rule>,<product>))
#
#
define inc_subdir
include $(Makefile.$(ARCH))

ifeq ($(TOPDIR),)

ifeq ($(MAKECMDGOALS),)
TARGETS := all
else
TARGETS := $(MAKECMDGOALS)
endif

PROD_NAME := $(shell find $(1) -name Makefile -exec awk '$(PROD_PATT){print $$3}' {} \+)
PROD_TGTS :=
$$(foreach TGT,$$(TARGETS), $$(foreach PROD,$$(PROD_NAME),$$(eval PROD_TGTS += $$(TGT).$$(PROD))))

$$(TARGETS):
	$(Q)$(MAKE) -C $$(_TOPDIR_) --no-print-directory $$(PROD_TGTS)
else
$$(foreach SUBDIR,$(2:%=$(1)%),$$(eval $$(call subdirs,$$(SUBDIR))))

endif
endef

#
# Wrapper macro to include "Makefile.<rule>".
#
define inc_rule
ifeq ($(TOPDIR),)

ifeq ($(MAKECMDGOALS),)
TARGETS := all.$(2)
else
TARGETS := $(MAKECMDGOALS:%=%.$(2))
$(MAKECMDGOALS): $$(TARGETS)
endif

$$(TARGETS):
	$(Q)$(MAKE) -C $$(_TOPDIR_) --no-print-directory $$@

else
include $(Makefile.$(1))
endif
endef

#
# Macro specifying rules to build an individual C object target and wrapper macro
# that accepts multiple C object targets and calls the worker macro
#
define C_OBJ_TGT
$(1): $(subst $(OBJDIR)/,,$(1:%.o=%.c)) | $(dir $(1))
	@if [ "$(VERBOSE)" = "1" ]; then \
		echo "Building $$< => $$@"; \
	fi;
	$(Q)$$(CC) $$(CFLAGS) $$(DEPFLAGS) -c $$< -o $$@
	@mv -f $$*.Td $$*.d && touch $$@

include $(wildcard $(patsubst %,%.d,$(basename $(1))))
endef
define add_c_obj_tgts
$$(foreach OBJFILE,$(1),$$(eval $$(call C_OBJ_TGT,$$(OBJFILE))))
endef

#
# Evaluate depency targets, CFLAGS and LFLAGS for deps as specified by $(DEPEND).
# This is common eval between Makefile.{cbin,clib}.
#  [in] - $(DEPEND), $(OBJDIR)
# [out] - Dependency targets: $(DEP_SO) $(DEP_AR)
#         Dependency CFLAGS: $(DEPINC)
#         Dependency LFLAGS: $(DEP_LD)
#
define eval_clib_deps
DEPDIR := $$(foreach dep,$$(DEPEND),$$(firstword $$(subst :, ,$$(dep))))
DEPTGT := $$(foreach dep,$$(DEPEND),$$(lastword $$(subst :, ,$$(dep))))
DEP_SO := $$(foreach dep,$$(DEPEND),$$(patsubst %,$$(OBJDIR)/%.so,$$(subst :,/lib,$$(dep))))
DEP_AR := $$(DEP_SO:%.so=%.a)
DEPINC := $$(DEPDIR:%=-I$$(OBJDIR)/%)
DEP_LD := $$(DEPDIR:%=-L$$(OBJDIR)/%)
DEP_LD += $$(DEPTGT:%=-l:lib%.a)
endef
