DOCKERFILE := $(_TOPDIR_)/build/Dockerfile.buildenv
IMAGE_NAME := stm32_buildenv
CONTAINER_NAME := $(IMAGE_NAME)$(subst /,.,$(subst $(HOME),,$(_TOPDIR_)))
DOCKER_CMD := DOCKER_BUILDKIT=1 docker

THIS_USER := $(shell whoami)
THIS_GROUP := $(shell id -gn "$(THIS_USER)")
THIS_UID := $(shell id -u)
THIS_GID := $(shell id -g)
DOCKER_SOCKET := /var/run/docker.sock
DOCKER_GID := $(shell stat -c '%g' $(DOCKER_SOCKET) 2>/dev/null)

define buildenv_image
	if [ "$(1)" = "clean" ]; then \
		$(DOCKER_CMD) image rm -f $(IMAGE_NAME) >/dev/null 2>&1 || true; \
	elif [ -z "$$($(DOCKER_CMD) images -q $(IMAGE_NAME) 2>/dev/null)" ]; then \
		$(DOCKER_CMD) build --build-arg USER=$(THIS_USER) \
			--build-arg GROUP=$(THIS_GROUP) \
			--build-arg UID=$(THIS_UID) \
			--build-arg GID=$(THIS_GID) \
			--build-arg DOCKER_GID=$(DOCKER_GID) \
			-t $(IMAGE_NAME) -f $(DOCKERFILE) .; \
	fi;
endef

define buildenv_container
	if [ "$$(uname -s)" = "Darwin" ]; then \
		IP=$$(ifconfig en0 | awk '$$1=="inet" {print $$2}'); \
		xhost + $$IP >/dev/null; \
		DISPLAY=$$IP:0; \
	else \
		DISPLAY=$(DISPLAY); \
	fi; \
	if [ "$(1)" = "stop" ]; then \
		$(DOCKER_CMD) stop $(CONTAINER_NAME) >/dev/null 2>&1 || true; \
	elif [ "$$($(DOCKER_CMD) ps --filter name=$(CONTAINER_NAME) --format "{{.Names}}")" != "$(CONTAINER_NAME)" ]; then \
		$(DOCKER_CMD) run --name $(CONTAINER_NAME) --rm -d --privileged --net=host \
			-u $(THIS_USER) \
			-e USER=$(THIS_USER) -e DISPLAY=$$DISPLAY -e BUILDENV_SHELL=true \
			-v /tmp/.X11-unix:/tmp/.X11-unix -v $(HOME)/.Xauthority:$(HOME)/.Xauthority -v "$(PWD):$(PWD)" -v $(DOCKER_SOCKET):$(DOCKER_SOCKET) -v /dev:/dev -v /tmp:/tmp \
			-w $(PWD) -it $(IMAGE_NAME); \
	fi;
endef

define buildenv_shell
	if [ "$(BUILDENV_SHELL)" = "true" ]; then \
		echo "Already inside buildenv-shell."; \
	else \
		$(DOCKER_CMD) exec -it $(CONTAINER_NAME) /bin/bash || true; \
	fi;
endef

mkenv:
	@$(call buildenv_image)

startenv: mkenv
	@$(call buildenv_container)

stopenv:
	@$(call buildenv_container,stop)

env: startenv
	@$(call buildenv_shell)

rmenv: stopenv
	@$(call buildenv_image,clean)

#
# Advertise only high-level targets
#
help.buildenv:
	@echo "Build environment targets"
	@echo "          env: Run a \"buildenv shell\" for this workspace"
	@echo "        rmenv: Remove existing build-environment (must exit \"buildenv shell\" first)"

.PHONY: mkenv stopenv
