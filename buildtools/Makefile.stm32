ifdef STM32_ELF

# Basic sanity check for this rule
ifeq ($(BUILDENV_SHELL)$(C_SRCS)$(S_SRCS),true)
$(error STM32_ELF: $(THIS_DIR)$(STM32_ELF)/Makefile has no input C_SRCS or S_SRCS)
endif

# Override to use arm-none-eabi-gcc and, consequently, $(OBJDIR) location
$(eval $(call inc_toolchain,firmware))

# This file defines rules for targets: [all|clean].$(PRODUCT)

PRODUCT_OBJDIR := $(OBJDIR)/$(PRODIR)

ELF := $(PRODUCT_OBJDIR)/$(STM32_ELF).elf
BIN := $(ELF:%.elf=%.bin)
HEX := $(ELF:%.elf=%.hex)
LD_MAP := $(ELF:%.elf=%.map)
FW_TARBALL := $(ELF:%.elf=%.tar)

H_INCS := $(H_DIRS:%=-I$(PRODIR)/%)
C_OBJS := $(C_SRCS:%.c=$(OBJDIR)/$(PRODIR)/%.o)
S_OBJS := $(S_SRCS:%.s=$(OBJDIR)/$(PRODIR)/%.o)
LD_SRC := $(LD_SRC:%=$(PRODIR)/%)

# For top Makefile
OBJ_SUBDIRS += $(sort $(dir $(C_OBJS) $(S_OBJS)) $(PRODUCT_OBJDIR))

# Dependency target, includes and LD paths (e.g. path/to/libdir:<C_LIB>)
$(eval $(call eval_clib_deps))

CFLAGS += $(GLOBAL_CFLAGS) $(STM32_CFLAGS)
CFLAGS += $(H_INCS)
CFLAGS += -DSTM32F401xE
CFLAGS += $(DEPINC)
LFLAGS += -Wl,--gc-sections -Wl,-n,--print-map,--cref,-Map,$(LD_MAP)
LFLAGS += $(DEP_LD)

# Add targets for each .o file
$(eval $(call add_c_obj_tgts,$(C_SRCS:%=$(PRODIR)/%)))

# Add targets to detect change in C flags (after add_c_obj_tgts() as it changes flags)
$(eval $(call cflags_change_tgt,stm32,$(STM32_ELF)))

define S_OBJ_TGT
$(1):: CC := $$(CC)
$(1):: CFLAGS := $$(CFLAGS)
$(1): $(subst $(OBJDIR)/,,$(1:%.o=%.s)) | $(dir $(1))
	@printf "%$(PCOL)s %s\n" "[CC]" $$@
	$(Q)$$(CC) $$(CFLAGS) -c $$< -o $$@
endef
$(foreach OBJFILE,$(S_OBJS),$(eval $(call S_OBJ_TGT,$(OBJFILE))))

# Build dep .a first but omit those files while linking
$(ELF):: CC := $(CC)
$(ELF):: LFLAGS := $(LFLAGS)
$(ELF): $(LD_SRC) $(DEP_AR) $(C_OBJS) $(S_OBJS)
	@printf "%$(PCOL)s %s\n" "[CCLD]" $@
	$(Q)$(CC) -T $(filter %.ld,$^) $(filter %.o,$^) $(LFLAGS) -o $@

$(BIN):: OBJCOPY := $(OBJCOPY)
$(BIN): $(ELF)
	@printf "%$(PCOL)s %s\n" "[OBJCOPY]" $@
	$(Q)$(OBJCOPY) -Obinary $^ $@

$(HEX):: OBJCOPY := $(OBJCOPY)
$(HEX): $(ELF)
	@printf "%$(PCOL)s %s\n" "[OBJCOPY]" $@
	$(Q)$(OBJCOPY) -Oihex $^ $@

$(LD_MAP): $(ELF)

all.$(PRODUCT): $(ELF) $(BIN) $(HEX)

# Add STM32_ELF product directory to install path
STM32_ELF_INSTALL_PREFIX := $(patsubst %/,%,$(dir $(PRODUCT_OBJDIR)))
$(eval $(call add_tarball_tgt,$(FW_TARBALL),$(ELF) $(BIN) $(HEX) $(LD_MAP),FW_INSTALL_PREFIX,$(STM32_ELF_INSTALL_PREFIX),TAR_INSTALL_MODE))
# Add to [product path, tarball path] "dictionary"
$(eval $(call update_prodtar,$(PRODPATH),$(FW_TARBALL)))
tarball.$(PRODUCT): $(FW_TARBALL)
	@true    # avoid "Nothing to be done for .."

clean.$(PRODUCT):: ELF := $(ELF)
clean.$(PRODUCT):: BIN := $(BIN)
clean.$(PRODUCT):: HEX := $(HEX)
clean.$(PRODUCT):: LD_MAP := $(LD_MAP)
clean.$(PRODUCT):: FW_TARBALL := $(FW_TARBALL)
clean.$(PRODUCT):: C_OBJS := $(C_OBJS)
clean.$(PRODUCT):: S_OBJS := $(S_OBJS)
clean.$(PRODUCT):: PRODUCT_OBJDIR := $(PRODUCT_OBJDIR)
clean.$(PRODUCT):: METADATA_FILE := $(METADATA_FILE)
clean.$(PRODUCT):
	@printf "%$(PCOL)s %s\n" "[RM]" "$(ELF)|.bin|.hex|.map|.tar"
	$(Q)rm -f $(ELF) $(BIN) $(HEX) $(LD_MAP) $(FW_TARBALL) $(S_OBJS) $(C_OBJS) $(C_OBJS:%.o=%.d) $(METADATA_FILE)
	$(Q)$(call del_empty_dirs,$(PRODUCT_OBJDIR))

# Add ease-of-use "flash" target to program the product on a [ST-Micro] board
$(eval $(call add_flash_tgt,flash.$(PRODUCT),$(BIN),$(BIN)))

endif  # define STM32_ELF
